# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  job_1:
    name: Add 3 and 7
    runs-on: ubuntu-latest
    steps:
      - name: w
        id: a
        run: echo "::set-output name=KojiTadokoro::YJSNPI"
    #  - shell: bash
    #    run: |
    #      echo "${{ github.workflow }}"
    #      echo ${{ github.workflow }}
    #      mkdir b
    #      expr 3 + 7 > math-homeworkA.txt
    #      expr 3 + 10 > b/math-homeworkB.txt
    #  - name: Upload math result for job 1
    #    uses: actions/upload-artifact@v1
    #    with:
    #      name: homework
    #      path: math-homeworkA.txt
    #  - name: Upload math result for job 1
    #    uses: actions/upload-artifact@v1
    #    with:
    #      name: homework
    #      path: b/math-homeworkB.txt
  # This workflow contains a single job called "build"
  build:
    needs: [job_1]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
     
    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: echo Hello, world! > yjsnpi
    - name: Download math result for job 1
      uses: actions/download-artifact@v1
      with:
        name: homework
        path: a
    - name: hoges
      run: |
        ls a
        function aaa() {
        echo ccc
        }
        echo ${YJSNPI} > ~/aaaaaaaaaa
        aaa --bbb "${YJSNPI}"
      env:
        YJSNPI: ${{ secrets.TADOKORO }}
    - name: e
      id: eee
      run: |
        cat > envsetup.sh << 'EOF'
        export AAA="HOGE"
        EOF
        AAA=ferrgrfre3
        echo "::set-output name=AAA::${AAA}"
    - name: cd
      env:
        key: ${{steps.eee.outputs.AAA}}
      run: |
        echo Q${key}
        echo W${{steps.eee.outputs.AAA}}
        pwd
        cd /
        pwd
    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      if: "contains(steps.eee.outputs.AAA, 'ferrg') && contains(steps.eee.outputs.AAA, 'fre3')"
      run: |
        pwd
        . envsetup.sh
        echo Add other actions to build,
        echo test, and deploy your project.
        echo $AAA
    - name: d
      run: |
        echo q:q
        echo q\:q
        #sudo rm -rf /opt/ghc /usr/share/{rust,dotnet}
        #echo ======================================
        #sudo du -shx * | sort -rh | head -10
        #echo =/====================================
        #sudo du -shx /* | sort -rh | head -10
        #echo =/USR=================================
        #sudo du -shx /usr/* | sort -rh | head -10
        #echo =/USR/SHARE===========================
        #sudo du -shx /usr/share/* | sort -rh | head -10
        #echo =/USR/LOCAL===========================
        #sudo du -shx /usr/local/* | sort -rh | head -10
        #echo =/OPT=================================
        #sudo du -shx /opt/* | sort -rh | head -10
        #echo ======================================
        #sudo apt install -qqy btrfs-progs
        #df -kP .
        #FUGA=$(df -kP . | sed -n 2P | awk '{ print $4 }')
        #fallocate -l $((${FUGA}-1024))K piyo
        #mkfs.btrfs piyo
        #mkdir mount
        #sudo mount -t btrfs -wo loop piyo mount
        #sudo chown -R ${USER}:${USER} mount
        #ls -alF mount
        #touch mount/goisgod
        #df -kP .
        #sudo umount mount
        #rmdir mount
        #rm piyo
        #df -kP .
